pipeline {
  agent any

  tools {
    nodejs 'nodejs'
       maven 'mvn 3.8.7'
  }

  environment {
    PROJECT_ROOT = 'PupaSvFE'
    PROJECT_ENDTOEND = 'PupaSvETE'
  }

  stages {
    stage('Limpiar Workspace') {
      steps {
        echo 'Eliminando archivos del workspace...'
        deleteDir()
      }
    }

    stage('Clonar repositorio') {
       steps {
        echo 'Clonando proyecto desde ruta local con git'
        sh 'git clone /usr/local/proyectos/PupaSvFE'
        sh 'git clone /usr/local/proyectos/PupaSvETE'
      }
    }
    
   stage('copiando artefacto del backend') {
      steps {
            copyArtifacts(
            projectName: 'PupaSv',
            selector: [$class: 'StatusBuildSelector', stable: true],
            fingerprintArtifacts: true
            )
            sh '''
              mkdir -p ${PROJECT_ENDTOEND}/target
              cp -f PupaSv/target/*.war ${PROJECT_ENDTOEND}/target/
              '''
        }
    }

    stage('Instalar dependencias') {
      steps {
        dir("${PROJECT_ROOT}") {
          sh 'npm install'
        }
      }
    }

    stage('Ejecutar pruebas de unidad') {
      steps {
        dir("${PROJECT_ROOT}") {
          sh 'npm run test'
        }
      }
    }
    
   stage('Ejecutar pruebas de integracion') {
  steps {
    dir("${PROJECT_ROOT}") {
      sh '''
        npm install -g browser-sync
        #browser-sync en segundo plano
        nohup browser-sync start --server ./test -f "**/*" --port 3050 --no-open > bs.log 2>&1 &

        npm run testIT
      '''
    }
  }
}


    stage('Eliminar imagen del frontend si existe') {
    steps {
      sh """
          if [ "\$(docker images -q ${env.FRONTEND_TEST_IMAGE})" ]; then
             docker rmi -f ${env.FRONTEND_TEST_IMAGE}
             else
            echo "La imagen $FRONTEND_TEST_IMAGE no existe. Nada que eliminar."
            fi
        """
    }
} 
    stage('Crear imagen para test end-to-end docker') {
      steps {
        dir("${PROJECT_ROOT}") {
          sh """docker build -t ${env.FRONTEND_TEST_IMAGE} ."""
        }
      }
    }
    
    stage('ejecutar pruebas end-to-end') {
      steps {
         echo 'Ejecutando pruebas unitarias con Maven'
                sh """
                    cd ${PROJECT_ENDTOEND}
                    mvn test
                """
      }
    }
  }

  post {
    success {
        
            script {
            def hora = new Date().format('yyyy-MM-dd HH:mm:ss', TimeZone.getTimeZone('America/El_Salvador'))
            writeFile file: 'PupaSvFE/info.txt', text: "Build: ${currentBuild.number}\nCreado: ${hora}\n"
             archiveArtifacts artifacts: 'PupaSvFE/src/**, PupaSvFE/info.txt ,PupaSvETE/target/**.mp4', fingerprint: true
             echo "Artefacto generado exitosamente"
            echo "Pipeline frontend número: ${currentBuild.number}"
            echo "Fecha de creación: ${hora}"
        }
   

       sh """
        if [ "\$(docker images -q ${env.FRONTEND_PROD_IMAGE})" ]; then
        docker rmi -f ${env.FRONTEND_PROD_IMAGE}
        else
            echo "La imagen ${env.FRONTEND_PROD_IMAGE} no existe. Nada que eliminar."
        fi
        """
        
        
      dir("${PROJECT_ROOT}") {
        // Construir imagen para producción
        sh """ docker build -t ${env.FRONTEND_PROD_IMAGE} ."""

        // Eliminar contenedor anterior si existe
        sh """
          if [ "\$(docker ps -aq -f name=${env.FRONTEND_CONTAINER})" ]; then
            docker stop ${env.FRONTEND_CONTAINER}
            docker rm -f ${env.FRONTEND_CONTAINER}
          fi
        """

        // Ejecutar contenedor
        sh """docker run -d --name ${env.FRONTEND_CONTAINER} --network tpi_pupa_network -p 3000:80 ${env.FRONTEND_PROD_IMAGE}"""
        sh 'docker start db16'
        sh """docker start ${env.BACKEND_CONTAINER}"""
      }
    }
  }
}