pipeline {
  agent any

  tools {
    nodejs 'nodejs'
       maven 'mvn 3.8.7'
  }

  environment {
    PROJECT_ROOT = 'PupaSvFE'
    PROJECT_ENDTOEND = 'PupaSvETE'
    FRONTEND_TEST_IMAGE = 'fronted-test'
    FRONTEND_PROD_IMAGE = 'fronted-pupa'
    FRONTEND_CONTAINER = 'frontend-pupa-container'
  }

  stages {
    stage('Limpiar Workspace') {
      steps {
        echo 'Eliminando archivos del workspace...'
        deleteDir()
      }
    }

    stage('Clonar repositorio') {
       steps {
        echo 'Clonando proyecto desde ruta local con git'
        sh 'git clone /usr/local/proyectos/PupaSvFE'
        sh 'git clone /usr/local/proyectos/PupaSvETE'
      }
    }
    
   stage('copiando artefacto del backend') {
      steps {
            copyArtifacts(
            projectName: 'PupaSv',
            selector: [$class: 'StatusBuildSelector', stable: true],
            fingerprintArtifacts: true
            )
            sh '''
              mkdir -p ${PROJECT_ENDTOEND}/target
              cp -f PupaSv/target/*.war ${PROJECT_ENDTOEND}/target/
              '''
        }
    }

    stage('Instalar dependencias') {
      steps {
        dir("${PROJECT_ROOT}") {
          sh 'npm install'
        }
      }
    }

    stage('Ejecutar pruebas de unidad') {
      steps {
        dir("${PROJECT_ROOT}") {
          sh 'npm run test'
        }
      }
    }

    stage('Eliminar imagen del frontend si existe') {
    steps {
      sh '''
        # Verificar si existe la imagen
        IMAGE_ID=$(docker images -q $FRONTEND_TEST_IMAGE)

        if [ -n "$IMAGE_ID" ]; then
            echo "La imagen $FRONTEND_TEST_IMAGE existe con ID $IMAGE_ID. Verificando contenedores en uso"

            # Buscar contenedores en ejecución que usan esta imagen
            CONTAINERS_USING_IMAGE=$(docker ps -q --filter ancestor=$IMAGE_ID)

            if [ -n "$CONTAINERS_USING_IMAGE" ]; then
                echo "Hay contenedores usando la imagen. Deteniéndolos..."
                docker stop $CONTAINERS_USING_IMAGE

                echo "Eliminando contenedores..."
                docker rm $CONTAINERS_USING_IMAGE
            fi

            echo "Eliminando la imagen $FRONTEND_TEST_IMAGE..."
            docker rmi -f $IMAGE_ID
        else
            echo "La imagen $FRONTEND_TEST_IMAGE no existe. Nada que eliminar."
        fi
      '''
    }
} 
    stage('Crear imagen para test end-to-end docker') {
      steps {
        dir("${PROJECT_ROOT}") {
          sh 'docker build -t $FRONTEND_TEST_IMAGE .'
        }
      }
    }
    
    stage('ejecutar pruebas end-to-end') {
      steps {
         echo 'Ejecutando pruebas unitarias con Maven'
                sh """
                    cd ${PROJECT_ENDTOEND}
                    mvn test
                """
      }
    }
  }

  post {
    success {
      archiveArtifacts artifacts: 'PupaSvFE/**', fingerprint: true

      sh '''
        if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^$FRONTEND_PROD_IMAGE:"; then
            echo "La imagen $FRONTEND_PROD_IMAGE existe. Eliminando..."
            docker rmi -f $(docker images -q $FRONTEND_PROD_IMAGE)
        else
            echo "La imagen $FRONTEND_PROD_IMAGE no existe. Nada que eliminar."
        fi
      '''

      dir("${PROJECT_ROOT}") {
        // Construir imagen para producción
        sh 'docker build -t $FRONTEND_PROD_IMAGE .'

        // Eliminar contenedor anterior si existe
        sh '''
          if [ "$(docker ps -aq -f name=$FRONTEND_CONTAINER)" ]; then
            docker rm -f $FRONTEND_CONTAINER
          fi
        '''

        // Ejecutar contenedor
        sh 'docker run -d --name $FRONTEND_CONTAINER --network tpi_pupa_network -p 3000:80 $FRONTEND_PROD_IMAGE'
        sh 'docker run db16'
        sh 'docker run backend-pupa-container'
      }
    }
  }
}