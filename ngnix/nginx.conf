# nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen 80;
        server_name localhost;

        # Sirve archivos estáticos desde el directorio 'public'
        location / {
            root /usr/share/nginx/html/public;
            index index.html index.htm;
            try_files $uri $uri/ /index.html; # Importante para SPAs (Single Page Applications)
        }

        # Configuración para proxy inverso al backend Java
        # Las peticiones a /PupaSv-1.0-SNAPSHOT/v1 (o la ruta que uses para tu API)
        # serán redirigidas al contenedor Java.
        # Usa el nombre del servicio Docker Compose o el alias de la red para comunicarte con Java.
        location /PupaSv-1.0-SNAPSHOT/v1 {
            # Aquí 'java-backend' es el nombre del servicio de tu contenedor Java en Docker Compose
            # o el nombre del host en tu red de Docker.
            # Asegúrate de que 'java-backend' pueda resolver al IP de tu contenedor Java.
            proxy_pass http://java-backend:8080/PupaSv-1.0-SNAPSHOT/v1; # Ajusta el puerto (8080 es común para Java)

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # Opcional: headers para manejar CORS si el frontend y backend no están en el mismo origen
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        }
    }
}